/* * Copyright 2006-2020 Marcel Baumann * * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain * a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations * under the License. *//** * The set of gradle command line special commands will seldom use: * To publish all modules in local maven repository         gradle publishMavenJavaPublicationToMavenLocal -Pmode=prod * To publish all module in maven central repository        gradle publishMavenJavaPublicationToMavenRepository -Pmode=prod * To generate static and aggregate code coverage metrics   gradle build jacocoTestReport jacocoRootReport -Pmode=int * To detect newer versions of libraries                    gradle dependencyUpdates -Drevision=release * To update sonar cloud                                    gradle sonarqube -Dsonar.projectKey=tangly-os-at-tangly.net *                                                                           -Dsonar.organization=tangly-os *                                                                           -Dsonar.host.url=https://sonarcloud.io *                                                                           -Dsonar.login=<login token> */plugins {    id 'maven-publish'    id 'signing'    id "jacoco"    id 'checkstyle'    id "com.github.spotbugs" version "4.3.0"    id "org.sonarqube" version "3.0"    id "info.solidsoft.pitest" version "1.5.1"    id 'com.google.cloud.tools.jib' version '2.4.0'    id 'com.github.ben-manes.versions' version '0.28.0'}ext {    // support conditional gradle script execution for dev, int, prod. Used for example to disable slow reporting plugins    mode = "dev"}apply plugin: 'jacoco'allprojects {    apply plugin: 'java'    apply plugin: 'jacoco'    apply plugin: 'maven-publish'    apply plugin: 'signing'    if (mode.equalsIgnoreCase('int')) {        // apply plugin: 'checkstyle'        apply plugin: 'com.github.spotbugs'        apply plugin: 'pmd'        // apply plugin: 'info.solidsoft.pitest'    }    repositories {        mavenLocal()        mavenCentral()        jcenter()        maven { url "https://maven.vaadin.com/vaadin-addons" }        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }    }    jacoco {        toolVersion = "0.8.6-SNAPSHOT"    }    //pitest {    //    adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"    //    junit5PluginVersion = '0.12'    //    targetClasses = ['net.tangly.*']    //    threads = 8    //    outputFormats = ['XML', 'HTML']    //    timestampedReports = false    //}    if (mode.equalsIgnoreCase('int')) {        checkstyle {            configDirectory = rootProject.file('src/main/resources/checkstyle')            // see https://checkstyle.sourceforge.io/releasenotes.html            toolVersion '8.32'            ignoreFailures = true        }        pmd {            ruleSetFiles = files(rootProject.file('src/main/resources/pmd-tangly.xml'))            toolVersion = "6.23.0"            ignoreFailures = true            incrementalAnalysis = true            rulePriority = 3        }        spotbugs {            ignoreFailures = true            effort = "max"            reportLevel = "low"            toolVersion = '4.0.3'        }        [spotbugsMain, spotbugsTest].each { task ->            task.configure {                reports {                    html {                        enabled = true                        stylesheet = 'fancy-hist.xsl'                    }                }            }        }        tasks.withType(Checkstyle) {            reports {                xml.enabled false                html.enabled true            }        }        tasks.withType(Pmd) {            reports {                xml.enabled false                html.enabled true            }        }    }    jacocoTestReport {        reports {            xml.enabled true            html.enabled true        }    }}def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.xml"sonarqube {    properties {        property "sonar.jacoco.reportPaths", allTestCoverageFile    }}// task to merge all subproject jacoco reports so that sonarqube has the correct test coverage resultstask jacocoMergeTests(type: JacocoMerge) {    destinationFile = file(allTestCoverageFile)    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.xml')}// task to visualize aggregated code coverage reports for multiple modulestask jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {    dependsOn = subprojects.test    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)    classDirectories.from = files(subprojects.sourceSets.main.output)    executionData.from = files(subprojects.jacocoTestReport.executionData)    reports {        html.enabled = true        xml.enabled = false        csv.enabled = false    }}subprojects {    sourceCompatibility = JavaVersion.VERSION_14    targetCompatibility = JavaVersion.VERSION_14    ext {        jacksonVersion = '2.11.0'        junitVersion = '5.7.0-M1'        slf4jVersion = '2.0.0-alpha1'        mockitoVersion = '3.3.3'        assertjVersion = '3.16.1'        annotationsVersion = '19.0.0'        archUnitVersion = '0.14.1'        flyWayVersion = '6.4.3'    }    dependencies {        implementation "org.slf4j:slf4j-api:$slf4jVersion"        implementation "org.jetbrains:annotations:$annotationsVersion"        runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"        testImplementation "org.assertj:assertj-core:$assertjVersion"        testImplementation "com.tngtech.archunit:archunit-junit5-api:$archUnitVersion"        testImplementation "com.google.jimfs:jimfs:1.1"        // testImplementation "org.awaitility:awaitility:4.0.1"        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"        testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:$archUnitVersion"    }    java {        withJavadocJar()        withSourcesJar()    }    tasks.withType(JavaCompile) {        options.encoding = 'UTF-8'        options.fork = true        options.incremental = true        options.warnings = true        options.deprecation = true        options.compilerArgs += ["-parameters", "--enable-preview", "-Xlint:unchecked"]    }    tasks.withType(Test) {        useJUnitPlatform()        options {            setExcludeTags(['integration', 'localTest'] as Set)        }        jvmArgs += "--enable-preview"        maxParallelForks = 8        failFast = false    }    tasks.withType(Javadoc) {        enabled = true        javadoc.options {            encoding("UTF-8")            addBooleanOption('-enable-preview', true)            addStringOption('-release', '14')        }    }    tasks.withType(JavaExec) {        jvmArgs += ['--enable-preview', '-XX:+ShowCodeDetailsInExceptionMessages']    }    jar {        doFirst {            manifest {                if (!configurations.runtime.isEmpty()) {                    manifest.attributes(                            'Name': project.name,                            'Automatic-Module-Name': project.ext.moduleName,                            'Specification-Title': "tangly open source library $project.ext.artifactId",                            'Specification-Version': project.version,                            'Specification-Vendor': "tangyly llc, Switzerland (https://www.tangly.net)",                            'License': 'Apache License v2.0',                            'Implementation-Title': project.name,                            'Implementation-Version': project.version,                            'Implementation-Vendor': "tangyly llc, Switzerland (https://www.tangly.net)",                            'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')                    )                }            }        }    }    publishing {        publications {            mavenJava(MavenPublication) {                afterEvaluate {                    groupId = project.ext.groupId                    artifactId = project.ext.artifactId                    version = project.version                }                from components.java                pom {                    afterEvaluate {                        name = project.ext.moduleName                        description = project.description                        url = 'https://tangly-team.bitbucket.io/'                        inceptionYear = project.ext.inceptionYear                    }                    versionMapping {                        usage('java-api') {                            fromResolutionOf('runtimeClasspath')                        }                        usage('java-runtime') {                            fromResolutionResult()                        }                    }                    licenses {                        license {                            name = 'The Apache License, Version 2.0'                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'                        }                    }                    developers {                        developer {                            id = 'marcelbaumann'                            name = 'Marcel Baumann'                            email = 'marcel.baumann@tangly.net'                            organization = 'tangly llc'                            organizationUrl = 'https://www.tangly.net'                        }                    }                    scm {                        connection = 'scm:git:https://bitbucket.org/tangly-team/tangly-os.git'                        developerConnection = 'scm:git:https://bitbucket.org/tangly-team/tangly-os.git'                        url = 'https://bitbucket.org/tangly-team/tangly-os.git'                    }                }            }        }        repositories {            maven {                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"                if (mode.equalsIgnoreCase('prod')) {                    credentials {                        // credentials are stored under ~/.gradle/gradle.properties and are first copied in local variables to avoid error if not defined                        credentials {                            username mavenCentralUsername                            password mavenCentralPassword                        }                    }                }            }        }    }    if (mode.equalsIgnoreCase('prod')) {        // currently credentials are not available in the CI pipeline therefore the configuration parameter to avoid spurious execution errors.        signing {            // credentials for signing are stored under ~/.gradle/gradle.properties            // gpg --export-secret-keys > secring.gpg            // gpg --no-default-keyring --keyring ./secring.gpg --list-keys --keyid-format short            sign publishing.publications.mavenJava        }    }    sonarqube {        properties {            property "sonar.jacoco.xmlReportPaths", allTestCoverageFile        }    }}