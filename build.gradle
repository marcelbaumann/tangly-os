/* * Copyright 2006-2018 Marcel Baumann * * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain * a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations * under the License. *//** * To publish all modules in local maven repository         gradle publishToMavenLocal * To generate static and aggregate code coverage metrics   gradle build jacocoTestReport jacocoRootReport -Pmode=int */plugins {    id "com.github.spotbugs" version "1.7.1"    id "org.sonarqube" version "2.6"    id "info.solidsoft.pitest" version "1.4.0"}ext {    // support conditional gradle script execution for dev, int, prod. Used for example to disable slow reporting plugins    mode = "dev"}apply plugin: 'jacoco'pitest {    targetClasses = ['net.tangly.*']    testPlugin = "junit5"    threads = 8    outputFormats = ['XML', 'HTML']    timestampedReports = false}allprojects {    apply plugin: 'java'    apply plugin: 'jacoco'    apply plugin: 'maven-publish'    if (mode.equalsIgnoreCase('int')) {        apply plugin: 'checkstyle'        apply plugin: 'com.github.spotbugs'        apply plugin: 'pmd'        // apply plugin: 'info.solidsoft.pitest'    }    repositories {        mavenLocal()        mavenCentral()        jcenter()        maven {            url "http://maven.vaadin.com/vaadin-addons"        }    }    if (mode.equalsIgnoreCase('int')) {        checkstyle {            toolVersion = '8.18'            configFile = rootProject.file('src/main/resources/checkstyle-tangly.xml')            ignoreFailures = true        }        pmd {            toolVersion = '6.12.0'            ruleSetFiles = files(rootProject.file('src/main/resources/pmd-tangly.xml'))            ignoreFailures = true            rulePriority = 3        }        spotbugs {            toolVersion = '3.1.12'            ignoreFailures = true            effort = "max"            reportLevel = "low"        }        tasks.withType(Checkstyle) {            reports {                xml.enabled false                html.enabled true            }        }        tasks.withType(com.github.spotbugs.SpotBugsTask) {            reports {                xml.enabled false                html.enabled true            }        }        tasks.withType(Pmd) {            reports {                xml.enabled false                html.enabled true            }        }    }    jacocoTestReport {        reports {            xml.enabled false            html.enabled true        }    }}def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"sonarqube {    properties {        property "sonar.jacoco.reportPaths", allTestCoverageFile    }}// task only so that sonarqube has the correct test coverage resultstask jacocoMergeTests(type: JacocoMerge) {    destinationFile = file(allTestCoverageFile)    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')}// task to visualize aggregated code coverage reports for multiple modulestask jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {    dependsOn = subprojects.test    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)    classDirectories = files(subprojects.sourceSets.main.output)    executionData = files(subprojects.jacocoTestReport.executionData)    reports {        html.enabled = true        xml.enabled = false        csv.enabled = false    }}subprojects {    sourceCompatibility = JavaVersion.VERSION_12    targetCompatibility = JavaVersion.VERSION_12    group = 'net.tangly'    version = '0.13.0'    ext {        jacksonVersion = '2.9.8'        junitVersion = '5.4.1'        slf4jVersion = '1.7.26'        mockitoVersion = '2.25.1'        assertjVersion = '3.12.2'        annotationsVersion = '17.0.0'        archUnitVersion = '0.10.1'    }    dependencies {        implementation "org.slf4j:slf4j-api:$slf4jVersion"        implementation "org.jetbrains:annotations:$annotationsVersion"        runtime "org.slf4j:slf4j-simple:$slf4jVersion"        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"        testImplementation "org.assertj:assertj-core:$assertjVersion"        testImplementation "com.tngtech.archunit:archunit-junit5-api:$archUnitVersion"        testImplementation "com.google.jimfs:jimfs:1.1"        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"        testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:$archUnitVersion"    }    tasks.withType(JavaCompile) {        options.fork = true        options.incremental = true        options.warnings = true        options.deprecation = true        options.compilerArgs += ["--enable-preview", "-parameters"]        // options.compilerArgs += ["-parameters", "-Xdoclint:all/public", "-Xlint:all"]    }    test {        useJUnitPlatform()        options {            setExcludeTags(['integration', 'localTest'] as Set)        }        jvmArgs '--enable-preview'        maxParallelForks = 8        failFast = false    }    jar {        doFirst {            manifest {                if (!configurations.runtime.isEmpty()) {                    manifest.attributes(                            'Name': project.name,                            'Automatic-Module-Name': moduleName,                            'Specification-Title': "tangly open source libraries",                            'Specification-Version': version,                            'Specification-Vendor': "tangyly llc (www.tangly.net)",                            'Implementation-Title': project.name,                            'Implementation-Version': version,                            'Implementation-Vendor': "tangly llc, Switzerland",                            'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')                    )                }            }        }    }    task sourcesJar(type: Jar) {        classifier = 'sources'        from sourceSets.main.allJava    }    task javadocJar(type: Jar) {        classifier = 'javadoc'        from javadoc.destinationDir    }    publishing {        publications {            tangly(MavenPublication) {                from components.java                artifact sourcesJar                artifact javadocJar                pom {                    name = 'tangly llc open source components'                    description = 'Open source components provided by tangly llc'                    url = 'http://www.tangly.net'                    licenses {                        license {                            name = 'The Apache License, Version 2.0'                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'                        }                    }                    developers {                        developer {                            id = 'marcelbaumann'                            name = 'Marcel Baumann'                            email = 'marcel.baumann@tangly.net'                        }                    }                    scm {                        connection = 'scm:git:https://bitbucket.org/tangly-team/tangly-os.git'                        url = 'http://www.tangly.net'                    }                }            }        }    }    sonarqube {        properties {            property "sonar.jacoco.reportPaths", allTestCoverageFile        }    }}