/* * Copyright 2006-2018 Marcel Baumann * * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain * a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations * under the License. */plugins {    id "com.github.spotbugs" version "1.6.5"    id "org.sonarqube" version "2.6"    id "info.solidsoft.pitest" version "1.3.0"  // gradle pitest, need 1.4.3 for Java 11 support, still not released 2018-10-04}ext {    // support conditional gradle script execution for dev, int, prod. Used for example to disable slow reporting plugins    mode = "dev"}apply plugin: 'jacoco'jacoco {    // current hack, 0.8.1 is current default version but only 0.8.2 and higher supports Java 18.9 (11)    toolVersion = "0.8.2"}pitest {    targetClasses = ['net.tangly.*']    testPlugin = "junit5"    threads = 8    outputFormats = ['XML', 'HTML']    timestampedReports = false}allprojects {    apply plugin: 'java'    apply plugin: 'jacoco'    if (mode.equalsIgnoreCase('int')) {        apply plugin: 'checkstyle'        apply plugin: 'com.github.spotbugs'        apply plugin: 'pmd'        // apply plugin: 'info.solidsoft.pitest'        // apply plugin: 'maven-publish'    }    repositories {        mavenLocal()        mavenCentral()        jcenter()        maven {            url "https://maven.jetstream.one/maven2-public"        }    }    if (mode.equalsIgnoreCase('int')) {        checkstyle {            configFile rootProject.file('src/main/resources/checkstyle-tangly.xml')            ignoreFailures = true        }        pmd {            ignoreFailures = true            ruleSets = ['java-basic']            rulePriority = 3        }        spotbugs {            toolVersion = '3.1.8'            ignoreFailures = true            effort = "max"            reportLevel = "low"        }        tasks.withType(Checkstyle) {            reports {                xml.enabled false                html.enabled true            }        }        tasks.withType(com.github.spotbugs.SpotBugsTask) {            reports {                xml.enabled false                html.enabled true            }        }        tasks.withType(Pmd) {            reports {                xml.enabled false                html.enabled true            }        }    }        jacocoTestReport {        reports {            xml.enabled false            html.enabled true        }    }    }if (mode.equalsIgnoreCase('int')) {    def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"    sonarqube {        properties {            property "sonar.jacoco.reportPaths", allTestCoverageFile        }    }    // task only so that sonarqube has the correct test coverage results    task jacocoMergeTests(type: JacocoMerge) {        destinationFile = file(allTestCoverageFile)        executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')    }}task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {    dependsOn = subprojects.test    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)    classDirectories = files(subprojects.sourceSets.main.output)    executionData = files(subprojects.jacocoTestReport.executionData)    reports {        html.enabled = true        xml.enabled = false        csv.enabled = false    }}subprojects {    sourceCompatibility = JavaVersion.VERSION_11    targetCompatibility = JavaVersion.VERSION_11    group = 'net.tangly'    version = '0.12.0'    ext {        jacksonVersion = '2.9.7'        junitVersion = '5.3.1'        slf4jVersion = '1.7.25'        mockitoVersion = '2.22.0'        assertjVersion = '3.11.1'        guiceVersion = '4.2.1'        annotationsVersion = '16.0.3'        archUnitVersion = '0.9.1'    }    configurations {        asciidoclet    }    dependencies {        asciidoclet 'org.asciidoctor:asciidoclet:1.5.4'        implementation "org.slf4j:slf4j-api:$slf4jVersion"        implementation "org.slf4j:slf4j-simple:$slf4jVersion"        implementation "com.google.inject:guice:$guiceVersion"        implementation "org.jetbrains:annotations:$annotationsVersion"        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"        testImplementation "org.assertj:assertj-core:$assertjVersion"        testImplementation "com.tngtech.archunit:archunit-junit5-api:$archUnitVersion"        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"        testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:$archUnitVersion"    }    tasks.withType(JavaCompile) {        options.fork = true        options.incremental = true        options.warnings = true        options.deprecation = true        // options.compilerArgs += ["-parameters", "-Xdoclint:all/public", "-Xlint:all"]    }    test {        useJUnitPlatform()        options {            setExcludeTags(['integration', 'localTest'] as Set)        }        maxParallelForks = 8        failFast = false    }    javadoc {        options.docletpath = configurations.asciidoclet.files as List        options.doclet = 'org.asciidoctor.Asciidoclet'        options.overview = "src/main/java/overview.adoc"        options.addStringOption "-base-dir", "${projectDir}"        options.addStringOption "-attribute", "name=${project.name}, version=${project.version}"    }    jar {        doFirst {            manifest {                if (!configurations.runtime.isEmpty()) {                    manifest.attributes(                            'Name': project.name,                            'Specification-Title': "tangly open source libraries",                            'Specification-Version': version,                            'Specification-Vendor': "tangyly llc (www.tangly.net)",                            'Implementation-Title': project.name,                            'Implementation-Version': version,                            'Implementation-Vendor': "tangly llc, Switzerland",                            'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')                    )                }            }        }    }    sonarqube {        properties {            property "sonar.jacoco.reportPaths", allTestCoverageFile        }    }}