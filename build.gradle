/*
 * Copyright 2006-2021 Marcel Baumann
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain
 *  a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations
 *  under the License.
 */

/**
 * The set of gradle command line special commands will seldom use:
 * To publish all modules in local maven repository         gradle publishMavenJavaPublicationToMavenLocal
 * To publish all module in maven central repository        gradle publishMavenJavaPublicationToMavenRepository -Pmode=prod
 * To generate aggregate code coverage metrics              gradle build jacocoTestReport jacocoRootReport
 * To generate static and aggregate code coverage metrics   gradle build jacocoTestReport jacocoRootReport -Pmode=int
 * To detect newer versions of libraries                    gradle dependencyUpdates -Drevision=release
 * To update sonar cloud                                    gradle sonarqube -Dsonar.login=<login token>
 * To create a production release                           gradle build -Pvaadin.productionMode.
 */
plugins {
    id "java-library"
    id 'maven-publish'
    id 'signing'
    id "jacoco"
    id "com.github.spotbugs" version "4.7.0"
    id "org.sonarqube" version "3.1.1"
    id "info.solidsoft.pitest" version "1.6.0"
    id 'com.google.cloud.tools.jib' version '3.0.0'
    id 'com.github.ben-manes.versions' version '0.38.0'
}

ext {
    // support conditional gradle script execution for dev, int, prod. Used for example to disable slow reporting plugins
    mode = "dev"
}

repositories {
    maven { setUrl("https://plugins.gradle.org/m2/") }
}

apply plugin: 'jacoco'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    if (mode.equalsIgnoreCase('int')) {
        apply plugin: 'com.github.spotbugs'
        apply plugin: 'pmd'
        apply plugin: 'jacoco'
        // apply plugin: 'info.solidsoft.pitest'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://maven.vaadin.com/vaadin-addons" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://raw.github.com/ZUGFeRD/mustangproject/mvn-repo" }
        maven { url "https://repo.microstream.one/repository/maven-public/" }
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    pitest {
        junit5PluginVersion.set('0.12')
        targetClasses.set(['net.tangly.*'])
        threads.set(8)
        outputFormats.set(['XML', 'HTML'])
        timestampedReports.set(false)
    }

    if (mode.equalsIgnoreCase('int')) {
        pmd {
            ruleSetFiles = files(rootProject.file('src/main/resources/pmd-tangly.xml'))
            toolVersion = "6.33.0"
            ignoreFailures = true
            incrementalAnalysis = true
            rulesMinimumPriority = 3
        }
        spotbugs {
            ignoreFailures = true
            effort = "max"
            reportLevel = "low"
            toolVersion = '4.2.2'
        }
        [spotbugsMain, spotbugsTest].each { task ->
            task.configure {
                reports {
                    html {
                        enabled = true
                        stylesheet = 'fancy-hist.xsl'
                    }
                }
            }
        }
        tasks.withType(Pmd) {
            reports {
                xml.enabled false
                html.enabled true
            }
        }
    }
    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "tangly-os-at-tangly.net"
        property "sonar.organization", "tangly-os"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.java.source", "1"
        property "sonar.coverage.jacoco.reportPath5s", "**/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.register("jacocoRootReport", JacocoReport) {
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.jacocoRootReport.dependsOn(it)
            }
        }
    }
    reports {
        xml.enabled true
        html.enabled true
    }
}

subprojects {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(16)
        }
        withJavadocJar()
        withSourcesJar()
    }

    ext {
        annotationsVersion = '20.1.0'
        apacheCommonsCvsVersion = '1.8'
        archUnitVersion = '0.18.0'
        asciidoctorjVersion = '2.4.3'
        asciidoctorjPdfVersion = '1.5.4'
        assertjVersion = '3.18.1'
        flyWayVersion = '7.8.1'
        guiceVersion = '5.0.1'
        hsqldbVersion = '2.6.0'
        jacksonVersion = '2.12.3'
        jsonValidatorVersion = '1.0.52'
        jsonVersion = '1.0.19.13'
        jimfsVersion = '1.2'
        junitVersion = '5.8.0-M1'
        slf4jVersion = '2.0.0-alpha1'
        microStreamVersion = '04.01.00-MS-GA'
        mockitoVersion = '3.9.0'
        pdfboxVersion = '2.0.23'
        sochartsVersion = '2.0.1'
        vaadinVersion = '19.0.5'
    }

    configurations.all {
        resolutionStrategy {
            // necessary to avoid runtime errors due to older versions without the fluent API functionality until 2.0 is released and used by all components
            force "org.slf4j:slf4j-api:$slf4jVersion"
            force "org.slf4j:slf4j-simple:$slf4jVersion"
            // necessary to avoid compile errors with MustangProject library
            force "org.assertj:assertj-core:$assertjVersion"
            // necessary to avoid JRuby errors because Jackson is loading version 1.19 with an API error
            force "org.yaml:snakeyaml:1.27"
        }
    }

    dependencies {
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "org.jetbrains:annotations:$annotationsVersion"
        implementation "com.google.inject:guice:$guiceVersion"
        runtimeOnly 'ch.qos.logback:logback-core:1.3.0-alpha5'

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "com.tngtech.archunit:archunit-junit5-api:$archUnitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:$archUnitVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.fork = true
        options.incremental = true
        options.warnings = true
        options.deprecation = true
        options.compilerArgs += ["-parameters", "--enable-preview", "-Xlint:all,-serial,-varargs", "-Xdoclint:none"]
    }

    tasks.withType(Test) {
        finalizedBy jacocoTestReport
        useJUnitPlatform()
        jvmArgs += ['--enable-preview']
        reports.junitXml.mergeReruns = true
        options {
            setExcludeTags(['integration'] as Set)
        }
        maxParallelForks = 8
        failFast = false
    }

    tasks.withType(Javadoc) {
        enabled = true
        javadoc.options {
            encoding("UTF-8")
            addBooleanOption('-Xdoclint:none')
            addBooleanOption('-enable-preview', true)
            addStringOption('-release', '16')
        }
    }

    tasks.withType(JavaExec) {
        jvmArgs += ['--enable-preview', '-XX:+ShowCodeDetailsInExceptionMessages']
    }

    jar {
        doFirst {
            manifest {
                attributes(
                    'Name': project.name,
                    'Automatic-Module-Name': project.ext.moduleName,
                    'Specification-Title': "tangly open source library $project.ext.artifactId",
                    'Specification-Version': project.version,
                    'Specification-Vendor': "tangyly llc, Switzerland (https://www.tangly.net)",
                    'License': 'Apache License v2.0',
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': "tangyly llc, Switzerland (https://www.tangly.net)",
                    'Build-Jdk': "${System.properties['java.version']}",
                    "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
                )
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    groupId = project.ext.groupId
                    artifactId = project.ext.artifactId
                    version = project.version
                }
                from components.java
                pom {
                    afterEvaluate {
                        name = project.ext.moduleName
                        description = project.description
                        url = 'https://tangly-team.bitbucket.io/'
                        inceptionYear = project.ext.inceptionYear
                    }
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'marcelbaumann'
                            name = 'Marcel Baumann'
                            email = 'marcel.baumann@tangly.net'
                            organization = 'tangly llc'
                            organizationUrl = 'https://www.tangly.net'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://bitbucket.org/tangly-team/tangly-os.git'
                        developerConnection = 'scm:git:https://bitbucket.org/tangly-team/tangly-os.git'
                        url = 'https://bitbucket.org/tangly-team/tangly-os.git'
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                if (mode.equalsIgnoreCase('prod')) {
                    credentials {
                        // credentials are stored under ~/.gradle/gradle.properties and are first copied in local variables to avoid error if not defined fpr
                        // example in CI pipeline (private keys should not be uploaded to a cloud CI)
                        credentials {
                            username mavenCentralUsername
                            password mavenCentralPassword
                        }
                    }
                }
            }
        }
    }

    if (mode.equalsIgnoreCase('prod')) {
        // currently credentials are not available in the CI pipeline therefore the configuration parameter to avoid spurious execution errors.
        signing {
            // credentials for signing are stored under ~/.gradle/gradle.properties
            // gpg --export-secret-keys > secring.gpg
            // gpg --no-default-keyring --keyring ./secring.gpg --list-keys --keyid-format short
            sign publishing.publications.mavenJava
        }
    }
}
